Integer类有一个静态缓存，存储了256个特殊的Integer对象——每个对象分别对应`-128 和127之间的一个值。
有了这个概念，就可以知道上面三行代码之间的区别。

new Integer(123);
显示创建了一个新的Integer对象。

Integer.parseInt("123");
解析完字符串后返回一个int值。

Integer.valueOf("123");
这种情况比其他的要更复杂一些。首先进行了字符串解析，然后如果解析的值位于-128和127之间，就会从静态缓存中返回对象。如果超出了这个范围，就会调用Integer()方法并将解析的值作为参数传入，得到一个新的对象。

现在，让我们看一下问题中的3个表达式。

Integer.valueOf("127")==Integer.valueOf("127");
上面的表达式返回true，因为Integer的值从静态缓存中取了2次，表达式返回了对象与自己比较的结果。因为只有一个Integer对象，所以返回结果为true。

Integer.valueOf("128")==Integer.valueOf("128");
上面的表达式返回false，因为128没有存在静态缓冲区。所以每次在判断相等时等式两边都会创建新的Integer对象。由于两个Integer对象不同，所以==只有等式两边代表同一个对象时才会返回true。因此，上面的等式返回false。

Integer.parseInt("128")==Integer.valueOf("128");
上面的表达式比较的是左边的原始int值128与右边新创建的Integer对象。但是因为int和Integer之间比较是没有意义的，所以Java在进行比较前会将Integer自动拆箱，所以最后进行的是int和int值之间的比较。由于128和自己相等，所以返回true。

